# -*- coding: utf-8 -*-
"""Movie_search_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lfhtCj9Sx-Gk-wQfFb20OAocBwip3xSv
"""

! pip install streamlit openai==0.28

import pandas as pd
from google.colab import drive
drive.mount('/content/gdrive/', force_remount=True)

data = pd.read_csv("/content/gdrive/MyDrive/Colab_Notebooks/CS688project/preprocessed_data.csv")
data.info()

df = data[['Title', 'Origin/Ethnicity', 'Release Year', 'Genre', 'Plot']]

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer

# Path to the saved model
saved_model_path = '/content/gdrive/MyDrive/Colab_Notebooks/CS688project/search-model'

# Load the saved model
model = SentenceTransformer(saved_model_path)

# Now you can use the loaded model for semantic search or any other task

import streamlit as st
import openai
import pandas as pd

# Set your OpenAI API key
openai.api_key = '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'

!pip install faiss-gpu

import streamlit as st
import pandas as pd
import faiss
from sentence_transformers import SentenceTransformer
import openai

# Set your OpenAI API key
openai.api_key = 'sk-token'

# Load the pre-trained semantic search model

index = faiss.read_index('/content/gdrive/MyDrive/Colab_Notebooks/CS688project/movie_plot.index')
df = pd.read_csv("/content/gdrive/MyDrive/Colab_Notebooks/CS688project/preprocessed_data.csv")

def fetch_movie_info(movie_title):
    info = df[df['Title'].str.lower() == movie_title.lower()].iloc[0]
    meta_dict = {}
    meta_dict['Title'] = info['Title']
    meta_dict['Plot'] = info['Plot']
    return meta_dict

def generate_summary(text):
    response = openai.Completion.create(
      engine="gpt-3.5-turbo-instruct",
      prompt="Summarize the following text:\n\n" + text,
      temperature=0.3,
      max_tokens=150
    )
    summary = response.choices[0].text.strip()
    return summary

# Streamlit UI
st.title("Movie Search and Summarization")

query = st.text_input("Enter your query:")
if st.button("Search"):
    # Semantic search
    query_vector = model.encode([query])
    _, top_k_ids = index.search(query_vector, 5)
    top_k_ids = top_k_ids.tolist()[0]
    top_k_movies = [fetch_movie_info(df.iloc[idx]['Title']) for idx in top_k_ids]

    # Display results
    st.subheader("Search Results:")
    for movie in top_k_movies:
        st.write(f"**Title:** {movie['Title']}")
        st.write(f"**Plot:** {movie['Plot']}")
        st.write("---")

        # Generate summary
        summary = generate_summary(movie['Plot'])
        st.write(f"**Summary:** {summary}")

